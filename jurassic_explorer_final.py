#!/usr/bin/env python3
"""
Generador de explorador del Jur√°sico usando el script que funcionaba
"""

import base64
import mimetypes
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def save_binary_file(file_name, data):
    """Guarda archivo binario en carpeta espec√≠fica"""
    # Crear carpeta si no existe
    output_folder = "jurassic_images"
    os.makedirs(output_folder, exist_ok=True)
    
    # Ruta completa del archivo
    full_path = os.path.join(output_folder, file_name)
    
    f = open(full_path, "wb")
    f.write(data)
    f.close()
    print(f"üíæ Archivo guardado: {full_path}")

def generate_jurassic_explorer():
    """Genera explorador del Jur√°sico usando el m√©todo que funcionaba"""
    
    try:
        # Importar la librer√≠a
        from google import genai
        from google.genai import types
        
        print("‚úÖ Librer√≠a google-genai importada correctamente")
        
        # Crear cliente
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            print("‚ùå No se encontr√≥ GOOGLE_API_KEY")
            return
        
        client = genai.Client(api_key=api_key)
        print("‚úÖ Cliente creado correctamente")
        
        # Verificar que existe la imagen
        if not os.path.exists("test.jpg"):
            print("‚ùå No se encontr√≥ test.jpg")
            return
        
        print("üì∏ Imagen test.jpg encontrada")
        
        # Modelo que soporta im√°genes
        model = "gemini-2.5-flash-image-preview"
        
        # Subir la imagen primero
        print("üì§ Subiendo imagen test.jpg...")
        uploaded_file = client.files.upload(file="test.jpg")
        print("‚úÖ Imagen subida correctamente")
        
        # Prompt mejorado para manejar m√∫ltiples personas y mantener poses originales
        prompt = "Analiza esta imagen y toma EXACTAMENTE el rostro y la pose de TODAS las personas que aparezcan. CR√çTICO: Mant√©n 100% fiel cada rostro original - ojos, nariz, boca, forma de la cara, expresi√≥n facial, edad y g√©nero de cada persona. MANT√âN EXACTAMENTE las poses, posturas y posiciones corporales que tienen en la imagen original. Viste a cada persona con trajes de explorador del Jur√°sico (chaqueta de cuero marr√≥n, botas altas, sombrero de explorador, cintur√≥n con herramientas) pero conservando su pose original. Coloca el fondo en el per√≠odo Jur√°sico con dinosaurios, vegetaci√≥n prehist√≥rica y volcanes. Si hay m√∫ltiples personas, mant√©n la misma composici√≥n y disposici√≥n espacial que en la imagen original. Iluminaci√≥n dram√°tica que destaque a todas las personas. Estilo realista y cinematogr√°fico, como una pel√≠cula de aventuras. Cada persona debe verse como un h√©roe explorador del Jur√°sico manteniendo su pose caracter√≠stica."
        
        print("üéØ Generando explorador del Jur√°sico con rostro de test.jpg...")
        print(f"üìù Prompt: Tomar rostro de test.jpg y crear explorador del Jur√°sico")
        
        contents = [
            types.Content(
                role="user",
                parts=[
                    types.Part.from_text(text=prompt),
                    types.Part.from_uri(
                        file_uri=uploaded_file.uri,
                        mime_type="image/jpeg"
                    )
                ],
            ),
        ]
        
        generate_content_config = types.GenerateContentConfig(
            response_modalities=[
                "IMAGE",
                "TEXT",
            ],
        )
        
        file_index = 0
        for chunk in client.models.generate_content_stream(
            model=model,
            contents=contents,
            config=generate_content_config,
        ):
            if (
                chunk.candidates is None
                or chunk.candidates[0].content is None
                or chunk.candidates[0].content.parts is None
            ):
                continue
                
            if chunk.candidates[0].content.parts[0].inline_data and chunk.candidates[0].content.parts[0].inline_data.data:
                file_name = "final.png"
                file_index += 1
                inline_data = chunk.candidates[0].content.parts[0].inline_data
                data_buffer = inline_data.data
                save_binary_file(file_name, data_buffer)
            else:
                if hasattr(chunk, 'text') and chunk.text:
                    print(f"üìù Texto generado: {chunk.text}")
        
        print("‚úÖ ¬°Explorador del Jur√°sico generado exitosamente!")
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("Instala la librer√≠a: pip install google-genai")
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    print("ü¶ï Generador de Explorador del Jur√°sico (M√©todo que Funciona)")
    print("=" * 60)
    generate_jurassic_explorer()
